import Vapor
// DictionariesApiDelegate.swift
//
// Generated by vapor-server-codegen
// https://github.com/thecheatah/SwiftVapor-swagger-codegen
// Template Input: /APIs.Dictionaries


public enum getAddressByKoatuuUsingGETResponse: ResponseEncodable {
  case http200(ShortAddressDTO)
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getContractorTypesUsingGETResponse: ResponseEncodable {
  case http200([ContractorType])
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getCountriesUsingGETResponse: ResponseEncodable {
  case http200([Country])
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getCurrencyListUsingGETResponse: ResponseEncodable {
  case http200([Country])
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getDkppUsingGETResponse: ResponseEncodable {
  case http200([DkppDict])
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getDksuDepartmentsUsingGETResponse: ResponseEncodable {
  case http200([Regions])
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getExactKvedUsingGETResponse: ResponseEncodable {
  case http200(KvedDict)
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getKopfgUsingGETResponse: ResponseEncodable {
  case http200([KvedDict])
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getKvedUsingGETResponse: ResponseEncodable {
  case http200([KvedDict])
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getOrgTypesUsingGETResponse: ResponseEncodable {
  case http200([OrganizationTypesDict])
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getProcurementDictionaryUsingGETResponse: ResponseEncodable {
  case http200([Procurement])
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum getRegionsUsingGETResponse: ResponseEncodable {
  case http200([Regions])
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum pingUsingGET1Response: ResponseEncodable {
  case http200
  case http401
  case http403
  case http404

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200:
      let response = Response()
      response.status = HTTPStatus(statusCode: 200)
      return request.eventLoop.makeSucceededFuture(response)
    case .http401:
      let response = Response()
      response.status = HTTPStatus(statusCode: 401)
      return request.eventLoop.makeSucceededFuture(response)
    case .http403:
      let response = Response()
      response.status = HTTPStatus(statusCode: 403)
      return request.eventLoop.makeSucceededFuture(response)
    case .http404:
      let response = Response()
      response.status = HTTPStatus(statusCode: 404)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}

public protocol DictionariesApiDelegate {
  associatedtype AuthType
  /**
  GET /v2/dictionaries/koatuu */
  func getAddressByKoatuuUsingGET(with req: Request, koatuu: String) throws -> EventLoopFuture<getAddressByKoatuuUsingGETResponse>
  /**
  GET /v2/dictionaries/contractors */
  func getContractorTypesUsingGET(with req: Request) throws -> EventLoopFuture<getContractorTypesUsingGETResponse>
  /**
  GET /v2/dictionaries/countries */
  func getCountriesUsingGET(with req: Request) throws -> EventLoopFuture<getCountriesUsingGETResponse>
  /**
  GET /v2/dictionaries/currency */
  func getCurrencyListUsingGET(with req: Request) throws -> EventLoopFuture<getCurrencyListUsingGETResponse>
  /**
  GET /v2/dictionaries/dkpp */
  func getDkppUsingGET(with req: Request) throws -> EventLoopFuture<getDkppUsingGETResponse>
  /**
  GET /v2/dictionaries/DKSUdepartments */
  func getDksuDepartmentsUsingGET(with req: Request) throws -> EventLoopFuture<getDksuDepartmentsUsingGETResponse>
  /**
  GET /v2/dictionaries/kved/{exactKved} */
  func getExactKvedUsingGET(with req: Request, exactKved: String) throws -> EventLoopFuture<getExactKvedUsingGETResponse>
  /**
  GET /v2/dictionaries/kopfg */
  func getKopfgUsingGET(with req: Request) throws -> EventLoopFuture<getKopfgUsingGETResponse>
  /**
  GET /v2/dictionaries/kved */
  func getKvedUsingGET(with req: Request) throws -> EventLoopFuture<getKvedUsingGETResponse>
  /**
  GET /v2/dictionaries/organizationtypes */
  func getOrgTypesUsingGET(with req: Request) throws -> EventLoopFuture<getOrgTypesUsingGETResponse>
  /**
  GET /v2/dictionaries/procurement */
  func getProcurementDictionaryUsingGET(with req: Request, lang: String?) throws -> EventLoopFuture<getProcurementDictionaryUsingGETResponse>
  /**
  GET /v2/dictionaries/regions */
  func getRegionsUsingGET(with req: Request) throws -> EventLoopFuture<getRegionsUsingGETResponse>
  /**
  GET /v2/dictionaries/ping */
  func pingUsingGET1(with req: Request) throws -> EventLoopFuture<pingUsingGET1Response>
}
